# Appveyor script to build and deploy the Yadoms plugin-SDK for Windows

# version format
version: 1.0.{build}

# Build worker image (VM template)
image: Visual Studio 2017

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform: Win32

# build Configuration, i.e. Debug, Release, etc.
configuration:
  - Debug
  - Release

init:
  - ps: Write-Host "`n### Build and deploy Yadoms plugin-SDK for Windows`n`n"
  

# Add pre-compiled dependencies in cache
cache:
  - extra_libs\boost_1_65_1 -> '.appveyor.yml'
  - extra_libs\poco-1.7.9-all -> '.appveyor.yml'
  - extra_libs\openssl -> '.appveyor.yml'
  - extra_libs\protobuf-3.4.1 -> '.appveyor.yml'
  - extra_libs\swig-3.0.12 -> '.appveyor.yml'
  - extra_libs\cmake-3.10.2 -> '.appveyor.yml'

# scripts that run after cloning repository
install:
  # Download extra libs
  - ps: Write-Host "Download extra libs..."
  - ps: if (!(Test-Path 'extra_libs')) { mkdir 'extra_libs' }
  - ps: pushd extra_libs
  - ps: if (!(Test-Path 'boost_1_65_1')) { Invoke-WebRequest http://yadoms.com/appveyor_build/boost_1_65_1-build.7z -OutFile boost.7z; 7z x boost.7z -bso0 }
  - ps: if (!(Test-Path 'poco-1.7.9-all')) { Invoke-WebRequest http://yadoms.com/appveyor_build/poco-1.7.9-all-build.7z -OutFile poco.7z; 7z x poco.7z -bso0 }
  - ps: if (!(Test-Path 'openssl')) { Invoke-WebRequest http://yadoms.com/appveyor_build/openssl-build.7z -OutFile openssl.7z; 7z x openssl.7z -bso0 }
  - ps: if (!(Test-Path 'swig-3.0.12')) { Invoke-WebRequest http://yadoms.com/appveyor_build/swig-3.0.12-build.7z -OutFile swig.7z; 7z x swig.7z -bso0 }
  - ps: if (!(Test-Path 'protobuf-3.4.1')) { Invoke-WebRequest http://yadoms.com/appveyor_build/protobuf-3.4.1-build.7z -OutFile protobuf.7z; 7z x protobuf.7z -bso0 }
  - ps: if (!(Test-Path 'cmake-3.10.2')) { Invoke-WebRequest https://cmake.org/files/v3.10/cmake-3.10.2.zip -OutFile cmake.7z; 7z x cmake.7z -bso0 }
  - ps: rm *.7z
  - ps: popd    
  - ps: Write-Host "[END] install"

# scripts to run before build
before_build:
  # Yadoms sources
  - ps: Write-Host "Downloading yadoms sources from $env:buildBranch branch..."
  - cmd: git clone -q --depth=1 --branch=%buildBranch% git://github.com/Yadoms/yadoms.git
  
  # Read current Yadoms version
  - ps: $yadomsVersion = Select-String -Path yadoms\sources\server\Version.h '.*\("(.*)"\)' -AllMatches | Foreach {$_.Matches | Foreach {$_.Groups[1] | Foreach {$_.Value}}}
  - ps: Write-Host "Yadoms version is $yadomsVersion"

  # Yadoms configuration file
  - ps: Write-Host "Create Yadoms configuration file CMakeListsUserConfig.txt..."
  - ps: $cd_for_cmake="$pwd".Replace("\", "/")
  - ps: Write-Host $cd_for_cmake
  - ps: Set-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(ALTERNATIVE_CMAKE_ROOT "/extra_libs/cmake-3.10.2")')
  - ps: Set-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(BOOST_ROOT "' + $cd_for_cmake + '/extra_libs/boost_1_65_1")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(POCO_ROOT "' + $cd_for_cmake + '/extra_libs/poco-1.7.9-all")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(OPENSSL_ROOT "' + $cd_for_cmake + '/extra_libs/openssl")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(PROTOBUF_ROOT "' + $cd_for_cmake + '/extra_libs/protobuf-3.4.1")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(SWIG_ROOT "' + $cd_for_cmake + '/extra_libs/swig-3.0.12")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(PYTHON_ROOT "C:/Python27")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(COTIRE_USE ON)')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(COTIRE_USE_UNITY ON)')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(PYTHON_USE_SOURCES OFF)')
  - ps: cat 'yadoms/sources/CMakeListsUserConfig.txt'

  # Patch plugins list to build only wanted plugins
  - ps: Write-Host "Patch plugins list to build only wanted plugins..."
  - ps: Remove-Item 'yadoms/sources/plugins/CMakeLists.txt'
  - ps: Set-Content 'yadoms/sources/plugins/CMakeLists.txt' ('add_subdirectory(dev-EmptyPlugin)')
  - ps: Set-Content 'yadoms/sources/plugins/CMakeLists.txt' ('add_subdirectory(dev-FakePlugin)')
  - ps: Set-Content 'yadoms/sources/plugins/CMakeLists.txt' ('set(PLUGINLIST dev-EmptyPlugin dev-FakePlugin PARENT_SCOPE)')
  
  # Create solution
  - ps: pushd yadoms
  - cmd: cmake_windows.cmd v141_xp
  - ps: popd
  
build: off
  # Use custom build
  
build_script:
  # Build Yadoms
  - ps: pushd yadoms/projects
  - ps: Write-Host 'Build...'
  - ps: msbuild shared/all_unity.vcxproj /p:Configuration=$env:configuration /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
  - ps: Write-Host 'Finalize output...'
  - ps: cp ../config/yadoms.ini ../builds/$env:configuration/
  - ps: popd

  # Copy all files to generate SDK package
  - ps: Write-Host 'Copy all files to generate SDK package...'
  - ps: $yadomsRoot = ".\yadoms"
  - ps: $boostRoot = ".\extra_libs\boost_1_65_1"
  - ps: $pocoRoot = ".\extra_libs\poco-1.7.9-all"
  - ps: $cmakeRoot = ".\extra_libs\cmake-3.10.2"
  - ps: $sdkOut=".\SDK"
  - ps: $robocopyFlags="/MT","/np","/njh","/ns","/nc","/nfl","/ndl"
  # Clean
  - ps: Write-Host "Clean $sdkOut folder..."
  - ps: if (Test-Path -Path $sdkOut) { Remove-Item $sdkOut -Force -Recurse -ErrorAction SilentlyContinue }
  # Copy Boost
  - ps: Write-Host "Copy Boost folder..."
  - ps: (robocopy "$boostRoot\boost" "$sdkOut\libs\boost\boost" $robocopyFlags /e) ^& IF %ERRORLEVEL% LEQ 1 exit 0
  - ps: (robocopy "$boostRoot\stage" "$sdkOut\libs\boost\stage" $robocopyFlags /e) ^& IF %ERRORLEVEL% LEQ 1 exit 0
  # Copy Poco
  - ps: Write-Host "Copy Poco folder..."
  - ps: robocopy "$pocoRoot\lib" "$sdkOut\libs\poco\lib" $robocopyFlags /e
  - ps: robocopy "$pocoRoot" "$sdkOut\libs\poco" "VERSION" $robocopyFlags
  - ps: robocopy "$pocoRoot\Util\src" "$sdkOut\libs\poco\Util\src" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\Util\include" "$sdkOut\libs\poco\Util\include" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\NetSSL_OpenSSL\src" "$sdkOut\libs\poco\NetSSL_OpenSSL\src" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\NetSSL_OpenSSL\include" "$sdkOut\libs\poco\NetSSL_OpenSSL\include" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\Crypto\src" "$sdkOut\libs\poco\Crypto\src" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\Crypto\include" "$sdkOut\libs\poco\Crypto\include" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\Zip\src" "$sdkOut\libs\poco\Zip\src" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\Zip\include" "$sdkOut\libs\poco\Zip\include" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\XML\src" "$sdkOut\libs\poco\XML\src" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\XML\include" "$sdkOut\libs\poco\XML\include" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\Net\src" "$sdkOut\libs\poco\Net\src" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\Net\include" "$sdkOut\libs\poco\Net\include" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\JSON\src" "$sdkOut\libs\poco\JSON\src" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\JSON\include" "$sdkOut\libs\poco\JSON\include" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\Foundation\src" "$sdkOut\libs\poco\Foundation\src" $robocopyFlags /e
  - ps: robocopy "$pocoRoot\Foundation\include" "$sdkOut\libs\poco\Foundation\include" $robocopyFlags /e
  # Copy CMake
  - ps: Write-Host "Copy CMake folder..."
  - ps: robocopy "$cmakeRoot" "$sdkOut\libs\cmake" $robocopyFlags /e
  # Copy Yadoms
  - ps: Write-Host "Copy Yadoms folder..."
  - ps: robocopy "$yadomsRoot\sources" "$sdkOut\yadoms\sources" $robocopyFlags /e /xd "plugins"
  - ps: robocopy "$yadomsRoot\sources\plugins" "$sdkOut\yadoms\sources\plugins" $robocopyFlags 
  - ps: robocopy "$yadomsRoot\sources\plugins\common" "$sdkOut\yadoms\sources\plugins\common" $robocopyFlags /e
  - ps: robocopy "$yadomsRoot\sources\plugins\dev-EmptyPlugin" "$sdkOut\yadoms\sources\plugins\dev-EmptyPlugin" $robocopyFlags /e
  - ps: robocopy "$yadomsRoot\sources\plugins\dev-FakePlugin" "$sdkOut\yadoms\sources\plugins\dev-FakePlugin" $robocopyFlags /e
  - ps: robocopy "$yadomsRoot\licensing" "$sdkOut\yadoms\licensing" $robocopyFlags /e
  - ps: robocopy "$yadomsRoot\psd" "$sdkOut\yadoms\psd" $robocopyFlags /e
  - ps: robocopy "$yadomsRoot\builds\DEBUG" "$sdkOut\yadoms\builds\DEBUG" $robocopyFlags /e /xf "*.ilk"
  - ps: robocopy "$yadomsRoot\builds\RELEASE" "$sdkOut\yadoms\builds\RELEASE" $robocopyFlags /e /xf "*.ilk"
  - ps: robocopy "$yadomsRoot\projects\shared\DEBUG" "$sdkOut\yadoms\projects\shared\DEBUG" $robocopyFlags /e /xf "*.ilk"
  - ps: robocopy "$yadomsRoot\projects\shared\RELEASE" "$sdkOut\yadoms\projects\shared\RELEASE" $robocopyFlags /e /xf "*.ilk"
  - ps: robocopy "$yadomsRoot\projects\plugin_cpp_api\DEBUG" "$sdkOut\yadoms\projects\plugin_cpp_api\DEBUG" $robocopyFlags /e /xf "*.ilk"
  - ps: robocopy "$yadomsRoot\projects\plugin_cpp_api\RELEASE" "$sdkOut\yadoms\projects\plugin_cpp_api\RELEASE" $robocopyFlags /e /xf "*.ilk"
  - ps: robocopy "$yadomsRoot\projects\plugin_IPC\DEBUG" "$sdkOut\yadoms\projects\plugin_IPC\DEBUG" $robocopyFlags /e /xf "*.ilk"
  - ps: robocopy "$yadomsRoot\projects\plugin_IPC\RELEASE" "$sdkOut\yadoms\projects\plugin_IPC\RELEASE" $robocopyFlags /e /xf "*.ilk"

  # Create the SDK package
  - ps: Write-Host 'Create the SDK package...'
  - ps: $yadomsGitdate = git --git-dir=.\yadoms\.git log -1 --format=%cI 
  - ps: Write-Host "Generating SDK package for Yadoms " + $yadomsVersion + " released on " + $yadomsGitdate
  - ps: 7z a -tzip plugin-SDK-windows-$yadomsVersion.zip $sdkOut
  
# after_build: TODO m√©nage ?
  # # Needed step to remove directory structure of artifacts
  # - ps: |
     # $packageFile = Get-ChildItem "yadoms/builds/package" -Name -Filter *.exe
     # Push-AppveyorArtifact yadoms/builds/package/$packageFile -FileName $packageFile -DeploymentName 'Yadoms installer'
     # $packageFile = Get-ChildItem "yadoms/builds/package" -Name -Filter *.zip
     # Push-AppveyorArtifact yadoms/builds/package/$packageFile -FileName $packageFile -DeploymentName 'Yadoms portable'
     # $packageFile = Get-ChildItem "." -Name -Filter *.zip
     # Push-AppveyorArtifact $packageFile -FileName $packageFile -DeploymentName 'Yadoms Update package'

artifacts:
  - path: plugin-SDK-windows-*.zip
    name: 'Yadoms plugin SDK for Windows'
    
deploy:
  - provider: FTP
    protocol: ftp
    host: ftp.jano42.fr
    username: janofnxr-yadoms
    password:
      secure: 8tosT9FAJxX+SRgkw02I1A==
    folder: appveyor_build/win32
    debug: true     # show complete FTP log TODO virer
